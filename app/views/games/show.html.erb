
<script>
$(function() {
  $("body").css("background", "url('/assets/board_background.png')");
});
</script>


<div class="chessboard <%= "waiting" if @waiting %>">
  <div class='text-center'>
    <h3><%= link_to "Play against yourself", play_against_yourself_path, class: 'btn btn-info',method: :post if @waiting%></h3>
    <br />
  </div>
  <br />
  <div class="row">
    <div id="whiteplayer" class="col-2 text-center">
      <% if user_signed_in? && @game.turn == @game.white_player.id && !@waiting %>
        <h5>White Player's Turn</h5>
        <%= image_tag gravatar_for(@game.white_player.email), alt: "@game.white_player.email" %>
      <% end %>
    </div>
    <div class="col-8">
      <% @board.reverse_each.with_index do |row, index_row| %>
          <%index_row = @board.length - index_row - 1 %>
          <div class = "row offset-2">
            <% row.each_with_index do |field, index_field| %>
              <span row = "<%=index_row%>" column = "<%=index_field%>" class="chess_field ui-widget-header <%= field[:class]%>">
                <% unless field[:piece].nil? %>
                  <span id="<%= field[:piece].id %>" class="ui-widget-content piece"><%= image_tag(field[:piece].image)%></span>
                <%end%>
              </span>
            <%end%>
          </div>
      <%end%>
    </div>
    <div id="blackplayer" class="col-2 text-center">
      <% if user_signed_in? && !@waiting && @game.turn == @game.black_player.id %>
        <h5>Black Player's Turn</h5>
        <%= image_tag gravatar_for(@game.black_player.email), alt: "@game.black_player.email" %>
      <% end %>
    </div>
    <br class="clear"/>
  </div>
</div>

<%= link_to "sign out",  destroy_user_session_path, method: :delete %>

<script>
  Pusher.logToConsole = true;
  var pusher = new Pusher("<%= ENV['PUSHER_KEY'] %>", {
    cluster: 'ap1',
    encrypted: true
  });
  var channel = pusher.subscribe('my-channel');
  channel.bind('second_player_joined', function(data) {
    console.log('second player joined');
    if (!window.location.href.substring(window.location.href).match('loaded')) {
      window.location = window.location + '#loaded';
      window.location.reload();
    }
  });
  var channel2 = pusher.subscribe('my-channel2');

  $(function() {
      $(".chessboard .piece").draggable({
        opacity: .4,
        create: function(){$(this).data('position',$(this).position())},
        cursorAt:{left:15},
        cursor:'move',
        start:function(){$(this).stop(true,true)}
      });

      let pieceId = 0;
      $(".piece").mousedown(function(){
        pieceId = $(this).attr('id');
      });

      $(".chess_field").droppable({
        classes: {
          "ui-droppable-hover": "ui-state-hover"
        },
        drop: function(event, ui) {
          snapToMiddle(ui.draggable,$(this));
          let row = $(this).attr('row');
          let column = $(this).attr('column');
          $.ajax({type: "PUT",
                 url: "/pieces/" + pieceId,
                 data: {
                    piece: {
                      row_coordinate: row,
                      column_coordinate: column,
                      id: pieceId
                      }
                 },
          });
        }
      });
      channel2.bind('piece_moved', function(data) {
        window.location.reload();
        // console.log(data.row_origin, data.column_origin, data.row_destination, data.column_destination);
        // let piece = $('span[id^='+data.piece_id+']');
        // piece.remove();
        // console.log(piece);
        // console.log(data.row_origin, data.column_origin, data.row_destination, data.column_destination);
        //  $("[row=" + data.row_destination + "][column=" + data.column_destination + "]").append(piece);
        //  piece.css('position', '');
        //  piece.draggable();
      });

      function snapToMiddle(dragger, target){
        var topMove = target.position().top - dragger.data('position').top + (target.outerHeight(true) - dragger.outerHeight(true)) / 2;
        var leftMove= target.position().left - dragger.data('position').left + (target.outerWidth(true) - dragger.outerWidth(true)) / 2;
        dragger.animate({top:topMove,left:leftMove},{duration:100,easing:'easeOutBack'});
      }
  });
</script>
